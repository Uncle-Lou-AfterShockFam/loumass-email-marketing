generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id @default(cuid())
  email          String          @unique
  name           String?
  password       String?
  emailVerified  DateTime?
  image          String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  accounts       Account[]
  campaigns      Campaign[]
  contacts       Contact[]
  emailTemplates EmailTemplate[]
  gmailToken     GmailToken?
  sequences      Sequence[]
  sessions       Session[]
  trackingDomain TrackingDomain?
  webhooks       Webhook[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model GmailToken {
  id            String   @id @default(cuid())
  userId        String   @unique
  email         String
  accessToken   String
  refreshToken  String
  expiresAt     DateTime
  scope         String?
  lastHistoryId String?  // For Gmail push notifications
  watchExpiry   DateTime? // When the Gmail watch expires
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model TrackingDomain {
  id          String    @id @default(cuid())
  userId      String    @unique
  domain      String
  subdomain   String    @default("track")
  cnameTarget String    @default("tracking.loumass.com")
  verified    Boolean   @default(false)
  verifiedAt  DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Contact {
  id                  String               @id @default(cuid())
  userId              String
  email               String
  firstName           String?
  lastName            String?
  company             String?
  phone               String?
  variables           Json?
  tags                String[]
  unsubscribed        Boolean              @default(false)
  bounced             Boolean              @default(false)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  user                User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  recipients          Recipient[]
  sequenceEnrollments SequenceEnrollment[]

  @@unique([userId, email])
  @@index([userId])
}

model Campaign {
  id               String         @id @default(cuid())
  userId           String
  name             String
  subject          String
  content          String
  status           CampaignStatus @default(DRAFT)
  scheduledFor     DateTime?
  sentAt           DateTime?
  sentCount        Int            @default(0)
  openCount        Int            @default(0)
  clickCount       Int            @default(0)
  replyCount       Int            @default(0)
  bounceCount      Int            @default(0)
  failedCount      Int            @default(0)
  trackingEnabled  Boolean        @default(true)
  trackingDomainId String?
  sequenceId       String?
  errorMessage     String?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  user             User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  sequence         Sequence?      @relation(fields: [sequenceId], references: [id], onDelete: SetNull)
  emailEvents      EmailEvent[]
  recipients       Recipient[]

  @@index([userId, status])
}

model Recipient {
  id             String          @id @default(cuid())
  campaignId     String
  contactId      String
  status         RecipientStatus @default(PENDING)
  sentAt         DateTime?
  openedAt       DateTime?
  clickedAt      DateTime?
  repliedAt      DateTime?
  bouncedAt      DateTime?
  variables      Json?
  errorMessage   String?
  gmailMessageId String?
  gmailThreadId  String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  emailEvents    EmailEvent[]
  campaign       Campaign        @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  contact        Contact         @relation(fields: [contactId], references: [id], onDelete: Cascade)

  @@unique([campaignId, contactId])
  @@index([campaignId, status])
}

model Sequence {
  id               String               @id @default(cuid())
  userId           String
  name             String
  description      String?
  triggerType      String               @default("manual")
  steps            Json
  trackingEnabled  Boolean              @default(true)
  status           SequenceStatus       @default(DRAFT)
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt
  user             User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  campaigns        Campaign[]
  enrollments      SequenceEnrollment[]

  @@index([userId])
}

model SequenceEnrollment {
  id             String           @id @default(cuid())
  sequenceId     String
  contactId      String
  status         EnrollmentStatus @default(ACTIVE)
  currentStep    Int              @default(0)
  completedAt    DateTime?
  pausedAt       DateTime?
  lastEmailSentAt DateTime?
  lastOpenedAt   DateTime?
  lastClickedAt  DateTime?
  lastRepliedAt  DateTime?
  openCount      Int              @default(0)
  clickCount     Int              @default(0)
  replyCount     Int              @default(0)
  gmailMessageId String?
  gmailThreadId  String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  contact        Contact          @relation(fields: [contactId], references: [id], onDelete: Cascade)
  sequence       Sequence         @relation(fields: [sequenceId], references: [id], onDelete: Cascade)
  sequenceEvents SequenceEvent[]
  @@unique([sequenceId, contactId])
  @@index([sequenceId, status])
}

model EmailEvent {
  id             String        @id @default(cuid())
  campaignId     String?
  recipientId    String?
  eventType      EventType
  eventData      Json?
  ipAddress      String?
  userAgent      String?
  createdAt      DateTime      @default(now())
  campaign       Campaign?     @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  recipient      Recipient?    @relation(fields: [recipientId], references: [id], onDelete: Cascade)

  @@index([campaignId, eventType])
  @@index([recipientId, eventType])
}

model SequenceEvent {
  id           String              @id @default(cuid())
  enrollmentId String
  stepIndex    Int
  eventType    EventType
  eventData    Json?
  ipAddress    String?
  userAgent    String?
  createdAt    DateTime            @default(now())
  enrollment   SequenceEnrollment  @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)

  @@index([enrollmentId, eventType])
  @@index([enrollmentId, stepIndex])
}

model EmailTemplate {
  id        String   @id @default(cuid())
  userId    String
  name      String
  subject   String
  content   String
  variables String[]
  category  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, category])
}

model Webhook {
  id        String   @id @default(cuid())
  userId    String
  url       String
  events    String[]
  secret    String
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, active])
}

enum CampaignStatus {
  DRAFT
  SCHEDULED
  SENDING
  SENT
  FAILED
  PAUSED
}

enum RecipientStatus {
  PENDING
  SENT
  OPENED
  CLICKED
  REPLIED
  BOUNCED
  FAILED
  UNSUBSCRIBED
}

enum SequenceStatus {
  DRAFT
  ACTIVE
  PAUSED
  COMPLETED
  ARCHIVED
}

enum EnrollmentStatus {
  ACTIVE
  PAUSED
  COMPLETED
  UNSUBSCRIBED
  FAILED
}


enum EventType {
  SENT
  DELIVERED
  OPENED
  CLICKED
  REPLIED
  BOUNCED
  UNSUBSCRIBED
  COMPLAINED
}
