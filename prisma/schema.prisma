generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String          @id @default(cuid())
  email                String          @unique
  name                 String?
  password             String?
  emailVerified        DateTime?
  image                String?
  // OAuth Credentials - each user brings their own
  googleClientId       String?         // User's Google OAuth Client ID
  googleClientSecret   String?         // User's Google OAuth Client Secret (encrypted)
  oauthConfigured      Boolean         @default(false) // Whether OAuth is configured
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt
  accounts             Account[]
  campaigns            Campaign[]
  contacts             Contact[]
  emailTemplates       EmailTemplate[]
  gmailToken           GmailToken?
  sequences            Sequence[]
  sessions             Session[]
  trackingDomain       TrackingDomain?
  webhooks             Webhook[]
  emailEvents          EmailEvent[]
  automations          Automation[]
  emailLists           EmailList[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model GmailToken {
  id            String   @id @default(cuid())
  userId        String   @unique
  email         String
  accessToken   String
  refreshToken  String
  expiresAt     DateTime
  scope         String?
  lastHistoryId String?  // For Gmail push notifications
  watchExpiry   DateTime? // When the Gmail watch expires
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model TrackingDomain {
  id          String    @id @default(cuid())
  userId      String    @unique
  domain      String
  subdomain   String    @default("track")
  cnameTarget String    @default("tracking.loumass.com")
  verified    Boolean   @default(false)
  verifiedAt  DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Contact {
  id                     String                  @id @default(cuid())
  userId                 String
  email                  String
  firstName              String?
  lastName               String?
  company                String?
  phone                  String?
  variables              Json?
  customFields           Json?                   // Additional custom fields
  tags                   String[]
  segments               String[]                // Contact segments for targeting
  status                 ContactStatus           @default(ACTIVE)
  unsubscribed           Boolean                 @default(false)
  unsubscribedAt         DateTime?
  bounced                Boolean                 @default(false)
  bouncedAt              DateTime?
  lastEngagement         DateTime?               // Last email interaction
  engagementScore        Int                     @default(0)
  source                 String?                 // How they were added (form, import, api, etc.)
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  user                   User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  recipients             Recipient[]
  sequenceEnrollments    SequenceEnrollment[]
  emailEvents            EmailEvent[]
  automationExecutions   AutomationExecution[]
  contactLists           ContactList[]

  @@unique([userId, email])
  @@index([userId])
  @@index([userId, status])
  @@index([userId, segments])
}

model Campaign {
  id               String         @id @default(cuid())
  userId           String
  name             String
  subject          String
  content          String
  attachments      Json?          // Store file attachments as JSON
  status           CampaignStatus @default(DRAFT)
  scheduledFor     DateTime?
  sentAt           DateTime?
  sentCount        Int            @default(0)
  openCount        Int            @default(0)
  clickCount       Int            @default(0)
  replyCount       Int            @default(0)
  bounceCount      Int            @default(0)
  failedCount      Int            @default(0)
  trackingEnabled  Boolean        @default(true)
  trackingDomainId String?
  sequenceId       String?
  errorMessage     String?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  user             User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  sequence         Sequence?      @relation(fields: [sequenceId], references: [id], onDelete: SetNull)
  emailEvents      EmailEvent[]
  recipients       Recipient[]

  @@index([userId, status])
}

model Recipient {
  id             String          @id @default(cuid())
  campaignId     String
  contactId      String
  status         RecipientStatus @default(PENDING)
  sentAt         DateTime?
  openedAt       DateTime?
  clickedAt      DateTime?
  repliedAt      DateTime?
  bouncedAt      DateTime?
  variables      Json?
  errorMessage   String?
  gmailMessageId String?
  gmailThreadId  String?
  messageIdHeader String? // Actual Message-ID header for threading
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  emailEvents    EmailEvent[]
  campaign       Campaign        @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  contact        Contact         @relation(fields: [contactId], references: [id], onDelete: Cascade)

  @@unique([campaignId, contactId])
  @@index([campaignId, status])
}

model Sequence {
  id               String               @id @default(cuid())
  userId           String
  name             String
  description      String?
  triggerType      String               @default("manual")
  sequenceType     SequenceType         @default(STANDALONE) // New field for sequence categorization
  steps            Json
  trackingEnabled  Boolean              @default(true)
  status           SequenceStatus       @default(DRAFT)
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt
  user             User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  campaigns        Campaign[]
  enrollments      SequenceEnrollment[]
  emailEvents      EmailEvent[]

  @@index([userId])
  @@index([userId, sequenceType])
}

model SequenceEnrollment {
  id             String           @id @default(cuid())
  sequenceId     String
  contactId      String
  status         EnrollmentStatus @default(ACTIVE)
  currentStep    Int              @default(0)
  completedAt    DateTime?
  pausedAt       DateTime?
  lastEmailSentAt DateTime?
  lastOpenedAt   DateTime?
  lastClickedAt  DateTime?
  lastRepliedAt  DateTime?
  openCount      Int              @default(0)
  clickCount     Int              @default(0)
  replyCount     Int              @default(0)
  gmailMessageId String?
  gmailThreadId  String?
  messageIdHeader String? // Actual Message-ID header for threading
  triggerCampaignId String? // Campaign that triggered this enrollment
  triggerRecipientId String? // Recipient ID from the campaign
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  contact        Contact          @relation(fields: [contactId], references: [id], onDelete: Cascade)
  sequence       Sequence         @relation(fields: [sequenceId], references: [id], onDelete: Cascade)
  sequenceEvents SequenceEvent[]
  @@unique([sequenceId, contactId])
  @@index([sequenceId, status])
}

model EmailEvent {
  id             String        @id @default(cuid())
  userId         String?       // Made optional for migration
  campaignId     String?
  sequenceId     String?
  contactId      String?
  recipientId    String?
  type           EventType?    // Made optional for migration (was eventType)
  eventType      EventType?    // Keep old field for backwards compatibility
  subject        String?
  details        String?
  timestamp      DateTime?     @default(now())
  eventData      Json?
  ipAddress      String?
  userAgent      String?
  createdAt      DateTime      @default(now())
  user           User?         @relation(fields: [userId], references: [id], onDelete: Cascade)
  campaign       Campaign?     @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  sequence       Sequence?     @relation(fields: [sequenceId], references: [id], onDelete: SetNull)
  contact        Contact?      @relation(fields: [contactId], references: [id], onDelete: Cascade)
  recipient      Recipient?    @relation(fields: [recipientId], references: [id], onDelete: Cascade)

  @@index([userId, type])
  @@index([campaignId, type])
  @@index([sequenceId, type])
  @@index([contactId, type])
  @@index([recipientId, type])
}

model SequenceEvent {
  id           String              @id @default(cuid())
  enrollmentId String
  stepIndex    Int
  eventType    EventType
  eventData    Json?
  ipAddress    String?
  userAgent    String?
  createdAt    DateTime            @default(now())
  enrollment   SequenceEnrollment  @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)

  @@index([enrollmentId, eventType])
  @@index([enrollmentId, stepIndex])
}

model EmailTemplate {
  id        String   @id @default(cuid())
  userId    String
  name      String
  subject   String
  content   String
  variables String[]
  category  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, category])
}

model Webhook {
  id          String        @id @default(cuid())
  userId      String
  name        String
  description String?
  url         String
  events      String[]
  secretKey   String
  status      WebhookStatus @default(ACTIVE)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  calls       WebhookCall[]

  @@index([userId, status])
}

model WebhookCall {
  id           String           @id @default(cuid())
  webhookId    String
  event        String
  status       WebhookCallStatus @default(PENDING)
  responseCode Int?
  responseTime Int?
  payload      Json
  response     String?
  error        String?
  createdAt    DateTime         @default(now())
  webhook      Webhook          @relation(fields: [webhookId], references: [id], onDelete: Cascade)

  @@index([webhookId, status])
  @@index([webhookId, createdAt])
}

enum CampaignStatus {
  DRAFT
  SCHEDULED
  SENDING
  SENT
  FAILED
  PAUSED
}

enum RecipientStatus {
  PENDING
  SENT
  OPENED
  CLICKED
  REPLIED
  BOUNCED
  FAILED
  UNSUBSCRIBED
}

enum SequenceStatus {
  DRAFT
  ACTIVE
  PAUSED
  COMPLETED
  ARCHIVED
}

enum EnrollmentStatus {
  ACTIVE
  PAUSED
  COMPLETED
  UNSUBSCRIBED
  FAILED
}


enum EventType {
  SENT
  DELIVERED
  OPENED
  CLICKED
  REPLIED
  BOUNCED
  UNSUBSCRIBED
  COMPLAINED
}

enum ContactStatus {
  ACTIVE
  UNSUBSCRIBED
  BOUNCED
  INACTIVE
}

enum SequenceType {
  STANDALONE        // Independent email sequence
  CAMPAIGN_FOLLOWUP // Campaign-triggered with delay before condition
}

// Accumbamail-style Automations
model Automation {
  id                 String                 @id @default(cuid())
  userId             String
  name               String
  description        String?
  // Initial trigger event
  triggerEvent       AutomationTriggerEvent @default(NEW_SUBSCRIBER)
  triggerData        Json?                  // Config for trigger (list ID, segment, date, etc.)
  applyToExisting    Boolean                @default(false) // Apply to current subscribers
  status             AutomationStatus       @default(DRAFT)
  trackingEnabled    Boolean                @default(true)
  // Flow configuration
  nodes              Json                   // Node-based flow structure
  // Statistics
  totalEntered       Int                    @default(0)
  currentlyActive    Int                    @default(0)
  totalCompleted     Int                    @default(0)
  createdAt          DateTime               @default(now())
  updatedAt          DateTime               @updatedAt
  user               User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  executions         AutomationExecution[]
  nodeStats          AutomationNodeStats[]

  @@index([userId, status])
  @@index([userId, triggerEvent])
}

// Individual automation executions per contact
model AutomationExecution {
  id             String                 @id @default(cuid())
  automationId   String
  contactId      String
  status         AutomationExecStatus   @default(ACTIVE)
  currentNodeId  String?                // Current node in the flow
  enteredAt      DateTime               @default(now())
  pausedAt       DateTime?
  completedAt    DateTime?
  failedAt       DateTime?
  failureReason  String?
  // Execution data
  variables      Json?                  // Contact-specific variables
  executionPath  Json?                  // Track path through automation
  executionData  Json?                  // Additional execution data
  waitUntil      DateTime?              // When to resume waiting executions
  startedAt      DateTime               @default(now())
  createdAt      DateTime               @default(now())
  updatedAt      DateTime               @updatedAt
  automation     Automation             @relation(fields: [automationId], references: [id], onDelete: Cascade)
  contact        Contact                @relation(fields: [contactId], references: [id], onDelete: Cascade)
  events         AutomationExecutionEvent[]

  @@unique([automationId, contactId])
  @@index([automationId, status])
  @@index([contactId])
}

// Events that occur during automation execution
model AutomationExecutionEvent {
  id           String              @id @default(cuid())
  executionId  String
  nodeId       String
  eventType    AutomationEventType
  eventData    Json?
  timestamp    DateTime            @default(now())
  execution    AutomationExecution @relation(fields: [executionId], references: [id], onDelete: Cascade)

  @@index([executionId, nodeId])
  @@index([nodeId, eventType])
}

// Statistics per automation node
model AutomationNodeStats {
  id           String     @id @default(cuid())
  automationId String
  nodeId       String
  totalPassed  Int        @default(0) // Total subscribers who passed through
  currentPassed Int       @default(0) // Since last run
  inNode       Int        @default(0) // Currently waiting in node
  lastUpdated  DateTime   @default(now())
  automation   Automation @relation(fields: [automationId], references: [id], onDelete: Cascade)

  @@unique([automationId, nodeId])
  @@index([automationId])
}

// Enums for Automation system
enum AutomationTriggerEvent {
  NEW_SUBSCRIBER    // When subscriber joins list
  SPECIFIC_DATE     // At specific date/time
  SUBSCRIBER_SEGMENT // New subscriber in segment
  WEBHOOK           // External webhook trigger
  MANUAL           // Manual trigger
}

enum AutomationStatus {
  DRAFT
  ACTIVE
  PAUSED
  STOPPED
  ARCHIVED
}

enum AutomationExecStatus {
  ACTIVE
  PAUSED
  COMPLETED
  FAILED
  UNSUBSCRIBED
  WAITING
  WAITING_UNTIL
}

enum AutomationEventType {
  ENTERED_NODE
  EXITED_NODE
  EMAIL_SENT
  EMAIL_OPENED
  EMAIL_CLICKED
  EMAIL_REPLIED
  CONDITION_MET
  CONDITION_FAILED
  WAIT_STARTED
  WAIT_COMPLETED
  WEBHOOK_SENT
  SMS_SENT
  FAILED
  EXECUTION_RESUMED
  UNTIL_CONDITION_MET
  UNTIL_TIMEOUT
}

enum WebhookStatus {
  ACTIVE
  INACTIVE
  ERROR
}

enum WebhookCallStatus {
  PENDING
  SUCCESS
  FAILED
}

// Email Lists and Segments Models
model EmailList {
  id              String    @id @default(cuid())
  userId          String
  name            String
  description     String?
  customFields    Json?     // [{name, type, options, required}]
  subscriberCount Int       @default(0)
  activeCount     Int       @default(0)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  segments        Segment[]
  contacts        ContactList[]
  
  @@index([userId])
}

model Segment {
  id              String    @id @default(cuid())
  listId          String
  name            String
  conditions      Json      // [{field, operator, value, logic}]
  isDynamic       Boolean   @default(true)
  subscriberCount Int       @default(0)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  list            EmailList @relation(fields: [listId], references: [id], onDelete: Cascade)
  
  @@index([listId])
}

model ContactList {
  id          String    @id @default(cuid())
  contactId   String
  listId      String
  customData  Json?     // Custom field values
  status      String    @default("active")
  subscribedAt DateTime @default(now())
  unsubscribedAt DateTime?
  
  contact     Contact   @relation(fields: [contactId], references: [id], onDelete: Cascade)
  list        EmailList @relation(fields: [listId], references: [id], onDelete: Cascade)
  
  @@unique([contactId, listId])
  @@index([listId, status])
  @@index([contactId])
}
