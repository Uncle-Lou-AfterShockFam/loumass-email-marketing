generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String          @id @default(cuid())
  email              String          @unique
  name               String?
  fromName           String?         // Name to display in FROM field of emails
  password           String?
  emailVerified      DateTime?
  image              String?
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  googleClientId     String?
  googleClientSecret String?
  oauthConfigured    Boolean         @default(false)
  variables          Json?           @default("{}")
  accounts           Account[]
  automations        Automation[]
  campaigns          Campaign[]
  contacts           Contact[]
  emailEvents        EmailEvent[]
  emailLists         EmailList[]
  emailTemplates     EmailTemplate[]
  gmailToken         GmailToken?
  segments           Segment[]
  sequences          Sequence[]
  sessions           Session[]
  trackingDomain     TrackingDomain?
  webhooks           Webhook[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model GmailToken {
  id            String    @id @default(cuid())
  userId        String    @unique
  email         String
  accessToken   String
  refreshToken  String
  expiresAt     DateTime
  scope         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  lastHistoryId String?
  watchExpiry   DateTime?
  lastRefreshAt DateTime?
  refreshCount  Int       @default(0)
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model TrackingDomain {
  id          String    @id @default(cuid())
  userId      String    @unique
  domain      String
  subdomain   String    @default("track")
  cnameTarget String    @default("tracking.loumass.com")
  verified    Boolean   @default(false)
  verifiedAt  DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Contact {
  id                   String                @id @default(cuid())
  userId               String
  email                String
  firstName            String?
  lastName             String?
  company              String?
  phone                String?
  variables            Json?
  tags                 String[]
  unsubscribed         Boolean               @default(false)
  bounced              Boolean               @default(false)
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  bouncedAt            DateTime?
  customFields         Json?
  engagementScore      Int                   @default(0)
  lastEngagement       DateTime?
  segments             String[]
  source               String?
  status               ContactStatus         @default(ACTIVE)
  unsubscribedAt       DateTime?
  automationExecutions AutomationExecution[]
  user                 User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  contactLists         ContactList[]
  emailEvents          EmailEvent[]
  recipients           Recipient[]
  sequenceEnrollments  SequenceEnrollment[]

  @@unique([userId, email])
  @@index([userId])
  @@index([userId, status])
  @@index([userId, segments])
}

model Campaign {
  id               String         @id @default(cuid())
  userId           String
  name             String
  subject          String
  content          String
  status           CampaignStatus @default(DRAFT)
  scheduledFor     DateTime?
  sentAt           DateTime?
  sentCount        Int            @default(0)
  openCount        Int            @default(0)
  clickCount       Int            @default(0)
  replyCount       Int            @default(0)
  bounceCount      Int            @default(0)
  failedCount      Int            @default(0)
  trackingEnabled  Boolean        @default(true)
  trackingDomainId String?
  errorMessage     String?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  sequenceId       String?
  attachments      Json?
  sequence         Sequence?      @relation(fields: [sequenceId], references: [id])
  user             User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  emailEvents      EmailEvent[]
  recipients       Recipient[]

  @@index([userId, status])
}

model Recipient {
  id              String          @id @default(cuid())
  campaignId      String
  contactId       String
  status          RecipientStatus @default(PENDING)
  sentAt          DateTime?
  openedAt        DateTime?
  clickedAt       DateTime?
  repliedAt       DateTime?
  bouncedAt       DateTime?
  variables       Json?
  errorMessage    String?
  gmailMessageId  String?
  gmailThreadId   String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  messageIdHeader String?
  emailEvents     EmailEvent[]
  campaign        Campaign        @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  contact         Contact         @relation(fields: [contactId], references: [id], onDelete: Cascade)

  @@unique([campaignId, contactId])
  @@index([campaignId, status])
}

model Sequence {
  id              String               @id @default(cuid())
  userId          String
  name            String
  status          SequenceStatus       @default(DRAFT)
  triggerType     String               @default("manual")
  steps           Json
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
  description     String?
  trackingEnabled Boolean              @default(true)
  sequenceType    SequenceType         @default(STANDALONE)
  campaigns       Campaign[]
  emailEvents     EmailEvent[]
  user            User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  enrollments     SequenceEnrollment[]

  @@index([userId])
  @@index([userId, sequenceType])
}

model SequenceEnrollment {
  id                 String           @id @default(cuid())
  sequenceId         String
  contactId          String
  status             EnrollmentStatus @default(ACTIVE)
  currentStep        Int              @default(0)
  completedAt        DateTime?
  pausedAt           DateTime?
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  clickCount         Int              @default(0)
  gmailMessageId     String?
  gmailThreadId      String?
  lastClickedAt      DateTime?
  lastEmailSentAt    DateTime?
  lastOpenedAt       DateTime?
  lastRepliedAt      DateTime?
  openCount          Int              @default(0)
  replyCount         Int              @default(0)
  messageIdHeader    String?
  triggerCampaignId  String?
  triggerRecipientId String?
  contact            Contact          @relation(fields: [contactId], references: [id], onDelete: Cascade)
  sequence           Sequence         @relation(fields: [sequenceId], references: [id], onDelete: Cascade)
  sequenceEvents     SequenceEvent[]

  @@unique([sequenceId, contactId])
  @@index([sequenceId, status])
}

model EmailEvent {
  id          String     @id @default(cuid())
  campaignId  String?
  recipientId String?
  eventType   EventType?
  eventData   Json?
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime   @default(now())
  contactId   String?
  details     String?
  sequenceId  String?
  subject     String?
  timestamp   DateTime?  @default(now())
  type        EventType?
  userId      String?
  campaign    Campaign?  @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  contact     Contact?   @relation(fields: [contactId], references: [id], onDelete: Cascade)
  recipient   Recipient? @relation(fields: [recipientId], references: [id], onDelete: Cascade)
  sequence    Sequence?  @relation(fields: [sequenceId], references: [id])
  user        User?      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, type])
  @@index([campaignId, type])
  @@index([sequenceId, type])
  @@index([contactId, type])
  @@index([recipientId, type])
}

model SequenceEvent {
  id           String             @id @default(cuid())
  enrollmentId String
  stepIndex    Int
  eventType    EventType
  eventData    Json?
  ipAddress    String?
  userAgent    String?
  createdAt    DateTime           @default(now())
  enrollment   SequenceEnrollment @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)

  @@index([enrollmentId, eventType])
  @@index([enrollmentId, stepIndex])
}

model EmailTemplate {
  id        String   @id @default(cuid())
  userId    String
  name      String
  subject   String
  content   String
  variables String[]
  category  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, category])
}

model Webhook {
  id          String        @id @default(cuid())
  userId      String
  url         String
  events      String[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  description String?
  name        String
  secretKey   String
  status      WebhookStatus @default(ACTIVE)
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  calls       WebhookCall[]

  @@index([userId, status])
}

model WebhookCall {
  id           String            @id @default(cuid())
  webhookId    String
  event        String
  status       WebhookCallStatus @default(PENDING)
  responseCode Int?
  responseTime Int?
  payload      Json
  response     String?
  error        String?
  createdAt    DateTime          @default(now())
  webhook      Webhook           @relation(fields: [webhookId], references: [id], onDelete: Cascade)

  @@index([webhookId, status])
  @@index([webhookId, createdAt])
}

model Automation {
  id              String                 @id @default(cuid())
  userId          String
  name            String
  description     String?
  triggerEvent    AutomationTriggerEvent @default(NEW_SUBSCRIBER)
  triggerData     Json?
  applyToExisting Boolean                @default(false)
  status          AutomationStatus       @default(DRAFT)
  trackingEnabled Boolean                @default(true)
  nodes           Json
  totalEntered    Int                    @default(0)
  currentlyActive Int                    @default(0)
  totalCompleted  Int                    @default(0)
  createdAt       DateTime               @default(now())
  updatedAt       DateTime               @updatedAt
  user            User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  executions      AutomationExecution[]
  nodeStats       AutomationNodeStats[]

  @@index([userId, status])
  @@index([userId, triggerEvent])
}

model AutomationExecution {
  id            String                     @id @default(cuid())
  automationId  String
  contactId     String
  status        AutomationExecStatus       @default(ACTIVE)
  currentNodeId String?
  enteredAt     DateTime                   @default(now())
  pausedAt      DateTime?
  completedAt   DateTime?
  failedAt      DateTime?
  failureReason String?
  variables     Json?
  executionPath Json?
  createdAt     DateTime                   @default(now())
  updatedAt     DateTime                   @updatedAt
  executionData Json?
  startedAt     DateTime                   @default(now())
  waitUntil     DateTime?
  automation    Automation                 @relation(fields: [automationId], references: [id], onDelete: Cascade)
  contact       Contact                    @relation(fields: [contactId], references: [id], onDelete: Cascade)
  events        AutomationExecutionEvent[]

  @@index([automationId, status])
  @@index([contactId])
}

model AutomationExecutionEvent {
  id          String              @id @default(cuid())
  executionId String
  nodeId      String
  eventType   AutomationEventType
  eventData   Json?
  timestamp   DateTime            @default(now())
  execution   AutomationExecution @relation(fields: [executionId], references: [id], onDelete: Cascade)

  @@index([executionId, nodeId])
  @@index([nodeId, eventType])
}

model AutomationNodeStats {
  id            String     @id @default(cuid())
  automationId  String
  nodeId        String
  totalPassed   Int        @default(0)
  currentPassed Int        @default(0)
  inNode        Int        @default(0)
  lastUpdated   DateTime   @default(now())
  automation    Automation @relation(fields: [automationId], references: [id], onDelete: Cascade)

  @@unique([automationId, nodeId])
  @@index([automationId])
}

model EmailList {
  id              String        @id @default(cuid())
  userId          String
  name            String
  description     String?
  customFields    Json?
  subscriberCount Int           @default(0)
  activeCount     Int           @default(0)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  contacts        ContactList[]
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  segments        Segment[]

  @@index([userId])
}

model Segment {
  id           String    @id @default(cuid())
  listId       String
  name         String
  conditions   Json
  isDynamic    Boolean   @default(true)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  contactCount Int       @default(0)
  description  String?
  userId       String
  list         EmailList @relation(fields: [listId], references: [id], onDelete: Cascade)
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([listId])
  @@index([userId])
}

model ContactList {
  id             String    @id @default(cuid())
  contactId      String
  listId         String
  customData     Json?
  status         String    @default("active")
  subscribedAt   DateTime  @default(now())
  unsubscribedAt DateTime?
  contact        Contact   @relation(fields: [contactId], references: [id], onDelete: Cascade)
  list           EmailList @relation(fields: [listId], references: [id], onDelete: Cascade)

  @@unique([contactId, listId])
  @@index([listId, status])
  @@index([contactId])
}

enum CampaignStatus {
  DRAFT
  SCHEDULED
  SENDING
  SENT
  FAILED
  PAUSED
}

enum RecipientStatus {
  PENDING
  SENT
  OPENED
  CLICKED
  REPLIED
  BOUNCED
  FAILED
  UNSUBSCRIBED
}

enum SequenceStatus {
  DRAFT
  ACTIVE
  PAUSED
  COMPLETED
  ARCHIVED
}

enum EnrollmentStatus {
  ACTIVE
  PAUSED
  COMPLETED
  UNSUBSCRIBED
  FAILED
}

enum EventType {
  SENT
  DELIVERED
  OPENED
  CLICKED
  REPLIED
  BOUNCED
  UNSUBSCRIBED
  COMPLAINED
}

enum ContactStatus {
  ACTIVE
  UNSUBSCRIBED
  BOUNCED
  INACTIVE
}

enum SequenceType {
  STANDALONE
  CAMPAIGN_FOLLOWUP
}

enum AutomationTriggerEvent {
  NEW_SUBSCRIBER
  SPECIFIC_DATE
  SUBSCRIBER_SEGMENT
  WEBHOOK
  MANUAL
}

enum AutomationStatus {
  DRAFT
  ACTIVE
  PAUSED
  STOPPED
  ARCHIVED
}

enum AutomationExecStatus {
  ACTIVE
  PAUSED
  COMPLETED
  FAILED
  UNSUBSCRIBED
  WAITING
  WAITING_UNTIL
}

enum AutomationEventType {
  ENTERED_NODE
  EXITED_NODE
  EMAIL_SENT
  EMAIL_OPENED
  EMAIL_CLICKED
  EMAIL_REPLIED
  CONDITION_MET
  CONDITION_FAILED
  WAIT_STARTED
  WAIT_COMPLETED
  WEBHOOK_SENT
  SMS_SENT
  FAILED
  EXECUTION_RESUMED
  UNTIL_CONDITION_MET
  UNTIL_TIMEOUT
}

enum WebhookStatus {
  ACTIVE
  INACTIVE
  ERROR
}

enum WebhookCallStatus {
  PENDING
  SUCCESS
  FAILED
}
